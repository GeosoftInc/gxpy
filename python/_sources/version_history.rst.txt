geosoft.gxpy module history
==========================================

  
Version 9.2.1
-----------------


New Functions
^^^^^^^^^^^^^

:func:`geosoft.gxpy.grid.Grid.xyz` Returns the (x, y, z) location of an indexed point in the grid.


  
Version 9.2
-----------------

New Classes
^^^^^^^^^^^

:class:`geosoft.gxpy.agg.Aggregate_image` Aggregate images are composed of one or more image/grids that can be displayed in a 2D or 3D display group.

:class:`geosoft.gxpy.coordinate_system.Coordinate_system` Coordinate system class. A coordinate system defines a horizontal and vertical reference

:class:`geosoft.gxpy.coordinate_system.Coordinate_translate` Class to reproject coordinates between different coordinate systems.

:class:`geosoft.gxpy.coordinate_system.Wkt` Helper class to parse WKT-formatted spatial reference strings.

:class:`geosoft.gxpy.dataframe.Data_frame` Pandas DataFrame from a Geosoft table.

:class:`geosoft.gxpy.geometry.Geometry` Geometry base class for all geometries.

:class:`geosoft.gxpy.geometry.PPoint` Poly-Point class. Basic instance arithmetic and equality testing is supported.

:class:`geosoft.gxpy.geometry.Point2` Two points, for a line, or a rectangle, or a cube.  Basic instance arithmetic and equality testing is supported.

:class:`geosoft.gxpy.geometry.Point` Spatial location (x,y,z).  Basic instance arithmetic and equality testing is supported.

:class:`geosoft.gxpy.group.Aggregate_group` Aggregate groups on a map

:class:`geosoft.gxpy.group.Color_symbols_group` Create a color symbols group with color mapping.

:class:`geosoft.gxpy.group.Color` Colours, which are stored as a 24-bit color integer.

:class:`geosoft.gxpy.group.Draw_3d` Create a 3D drawing group within a 3D view.

:class:`geosoft.gxpy.group.Group` Geosoft group class.

:class:`geosoft.gxpy.group.Text_def` Text definition:

:class:`geosoft.gxpy.map.Map` Geosoft map files.

:class:`geosoft.gxpy.view.View_3d` Geosoft 3D views, which contain 3D drawing groups.

:class:`geosoft.gxpy.view.View` Geosoft view class.

:exc:`geosoft.gxpy.agg.AggregateException` Exceptions from :mod:`geosoft.gxpy.agg`.

:exc:`geosoft.gxpy.coordinate_system.CSException` Exceptions from :mod:`geosoft.gxpy.coordinate_system`.

:exc:`geosoft.gxpy.dataframe.DfException` Exceptions from :mod:`geosoft.gxpy.dataframe`.

:exc:`geosoft.gxpy.group.GroupException` Exceptions from :mod:`geosoft.gxpy.group`.

:exc:`geosoft.gxpy.map.MapException` Exceptions from :mod:`geosoft.gxpy.map`.

:exc:`geosoft.gxpy.view.ViewException` Exceptions from :mod:`geosoft.gxpy.view`.

:exc:`geosoft.gxpy.viewer.ViewerException` Exceptions from :mod:`geosoft.gxpy.viewer`.


New Functions
^^^^^^^^^^^^^

:func:`geosoft.gxpy.agg.Aggregate_image.add_layer` Add an image layer to an aggregate

:func:`geosoft.gxpy.agg.Aggregate_image.new` Create a new aggregate from a grid.

:func:`geosoft.gxpy.agg.Aggregate_image.open` Create an :class:`Aggregate_image` from a :class:`geosoft.gxapi.GXAGG` instance.

:func:`geosoft.gxpy.coordinate_system.Coordinate_system.coordinate_dict` Returns "Geosoft" dictionary of coordinate system attributes.

:func:`geosoft.gxpy.coordinate_system.Coordinate_system.cs_name` Return requested name.

:func:`geosoft.gxpy.coordinate_system.Coordinate_system.oriented_from_xyz` Return oriented (x, y, z) coordinates from true base (x, y, z) coordinates.

:func:`geosoft.gxpy.coordinate_system.Coordinate_system.same_as` Return True if both coordinate systems (HCS and VCS) are the same.

:func:`geosoft.gxpy.coordinate_system.Coordinate_system.same_hcs` Return True if the HCS are the same.

:func:`geosoft.gxpy.coordinate_system.Coordinate_system.same_vcs` Return True if the VCS are the same.

:func:`geosoft.gxpy.coordinate_system.Coordinate_system.xyz_from_oriented` Return true base (x, y, z) coordinates from oriented (x, y, z) coordinates.

:func:`geosoft.gxpy.coordinate_system.Coordinate_translate.convert` Project data in array in which first columns are x,y or x,y,z.

:func:`geosoft.gxpy.coordinate_system.Wkt.find_key` Return the name and list of items for a key

:func:`geosoft.gxpy.coordinate_system.find_key` Find a key in the wkt, return it's name and items.

:func:`geosoft.gxpy.coordinate_system.hcs_orient_vcs_from_name` Split a full coordinate system name into its components. A name has the form "hcs <orient> [vcs]"

:func:`geosoft.gxpy.coordinate_system.list_from_wktsrs` Return a list from a wkt spatial reference string.

:func:`geosoft.gxpy.coordinate_system.name_from_hcs_orient_vcs` Construct a coordinate system name from an hcs, orientation and vcs.  If orient or vcs are None or

:func:`geosoft.gxpy.coordinate_system.name_list` Get a list of coordinate system names

:func:`geosoft.gxpy.coordinate_system.parameter_exists` Test if a parameter set exists in a coordinate system table.

:func:`geosoft.gxpy.coordinate_system.parameters` Get a dictionary of parameters for a coordinate system item.  Parameters are maintained in

:func:`geosoft.gxpy.coordinate_system.wkt_vcs` Compose a wkt VERTCS block from a Geosoft vcs string.

:func:`geosoft.gxpy.dataframe.table_column` Return a dictionary of a column from a table

:func:`geosoft.gxpy.dataframe.table_record` Return a dictionary of a single record from a table

:func:`geosoft.gxpy.gdb.Geosoft_gdb.extent_xyz` Return the spatial extent of all selected data in the database.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.read_channel_va` Read VA data from a single channel, return in a va.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.read_channel_vv` Read data from a single channel, return in a vv.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.read_line_vv` Read a line of data into VVs stored in a dictionary by channel.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.write_channel_va` Write VA data to a single channel.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.write_channel_vv` Write data to a single channel.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.write_line_vv` Write data to multiple channels in a line.  If no channel list is provided it assumes that the

:func:`geosoft.gxpy.geometry.PPoint.make_xyz_vv` Return x, y and z as a set of :class:`geosoft.gxpy.vv.GXvv`.

:func:`geosoft.gxpy.grid.Grid.copy` Create a new Grid instance as a copy of an existing grid.

:func:`geosoft.gxpy.grid.Grid.extent_2d` Return the 2D extent of the grid on the grid plane

:func:`geosoft.gxpy.grid.Grid.extent_3d` Return the 3D extent of the grid in the base coordinate system.

:func:`geosoft.gxpy.grid.Grid.index_window` Create a windowed instance of a grid.

:func:`geosoft.gxpy.grid.Grid.xyzv` Return a numpy float array of (x, y, z, v) grid points.

:func:`geosoft.gxpy.grid.delete_files` Delete all files associates with this grid name.

:func:`geosoft.gxpy.group.Color.adjust_brightness` Return a :class:`Color` instance adjusted for brightness.

:func:`geosoft.gxpy.group.Color_map.color_of_value` Return the gxg.Color of a value.  The mapping is determined with exclusive minima, inclusive maxima

:func:`geosoft.gxpy.group.Color_map.set_linear` Set the map boundaries based on a linear distribution between minimum and maximum.

:func:`geosoft.gxpy.group.Color_map.set_logarithmic` Set the color boundaries based on a logarithmic distribution between minimum and maximum.

:func:`geosoft.gxpy.group.Color_map.set_normal` Set the color boundaries using a normal distribution around a mean.

:func:`geosoft.gxpy.group.Color_map.set_sequential` Set color map zones based on a start and increment between each color zone.

:func:`geosoft.gxpy.group.Draw.contour` Draw contours for a grid file.  A default contour interval is determined from the grid.

:func:`geosoft.gxpy.group.Draw.graticule` Draw a graticule reference on a view.

:func:`geosoft.gxpy.group.Draw.line` Draw a line on the current plane

:func:`geosoft.gxpy.group.Draw.new_pen` Returns a pen that inherits default from the current view pen.  Arguments are the same

:func:`geosoft.gxpy.group.Draw.polygon` Draw a polygon on the current plane.

:func:`geosoft.gxpy.group.Draw.polyline` Draw a polyline the current plane

:func:`geosoft.gxpy.group.Draw.rectangle` Draw a 2D rectangle on the current plane

:func:`geosoft.gxpy.group.Draw.text` Draw text in the view.

:func:`geosoft.gxpy.group.Draw_3d.box_3d` Draw a 3D box

:func:`geosoft.gxpy.group.Draw_3d.cone_3d` Draw a cone.

:func:`geosoft.gxpy.group.Draw_3d.cylinder_3d` Draw a cylinder.

:func:`geosoft.gxpy.group.Draw_3d.polydata_3d` Create 3D objects rendered by the data.

:func:`geosoft.gxpy.group.Draw_3d.polyline_3d` Draw a polyline.

:func:`geosoft.gxpy.group.Draw_3d.polypoint_3d` Draw multiple points.

:func:`geosoft.gxpy.group.Draw_3d.sphere` Draw a sphere.

:func:`geosoft.gxpy.group.Group.extent_map_cm` Return a view extent in map cm.

:func:`geosoft.gxpy.group.Group.locate` Locate the group relative to a point.

:func:`geosoft.gxpy.group.Pen.from_mapplot_string` Create a :class:`Pen` instance from a mapplot-style string descriptor using either a

:func:`geosoft.gxpy.group.edge_reference` Location of a reference point of an area.

:func:`geosoft.gxpy.group.font_weight_from_line_thickness` Returns font weight for a text height and line thickness.

:func:`geosoft.gxpy.group.legend_color_bar` Draw a color bar legend from :class:Color_map coloring definitions.

:func:`geosoft.gxpy.group.thickness_from_font_weight` Returns the line thickness appropriate for a text weight.

:func:`geosoft.gxpy.gx.GXpy.elapsed_seconds` Return the elapsed seconds since this GX instance started.

:func:`geosoft.gxpy.gx.GXpy.keep_temp_folder` Keep temporary file folder setting.

:func:`geosoft.gxpy.gx.GXpy.log` Log a string to the log file or log call-back as defined when creating :class:`GXpy` instance.

:func:`geosoft.gxpy.gx.GXpy.temp_file` Return a unique temporary file name as a full path.  The temporary file is created in

:func:`geosoft.gxpy.gx.GXpy.temp_folder` Return the GX temporary folder path.

:func:`geosoft.gxpy.gx.pop_resource` Pop a tracked resource off the resource stack.

:func:`geosoft.gxpy.gx.track_resource` Track a resource.  Resource tracking is useful for debugging resource leaks.  If you create a class

:func:`geosoft.gxpy.map.Map.annotate_data_ll` Annotate the data view axis

:func:`geosoft.gxpy.map.Map.annotate_data_xy` Annotate a data view axis

:func:`geosoft.gxpy.map.Map.create_linked_3d_view` Create a linked 3D view inside a 2D map to a `gxpy.view.View_3d` in a 3DV

:func:`geosoft.gxpy.map.Map.delete_view` Delete a view from a map. You cannot delete the last view in a mep.

:func:`geosoft.gxpy.map.Map.extent_data_views` Returns the extent of all data views on the map in map cm.

:func:`geosoft.gxpy.map.Map.get_class_name` Get the view name associated with a class.

:func:`geosoft.gxpy.map.Map.map_reference_location` Return the location of a reference point relative to the current clipping window

:func:`geosoft.gxpy.map.Map.new` Create and open a new Geosoft map.

:func:`geosoft.gxpy.map.Map.north_arrow` Add a North arrow to the base view of the map.

:func:`geosoft.gxpy.map.Map.open` Open an existing map file.

:func:`geosoft.gxpy.map.Map.scale_bar` Draw a scale bar.

:func:`geosoft.gxpy.map.Map.set_class_name` Set the view name associated with a class.

:func:`geosoft.gxpy.map.Map.surround` Draw a map surround.  This will draw a single or a double neat-line around the base view of the

:func:`geosoft.gxpy.map.crc_map` Return the CRC of a map based on the output bitmap image.

:func:`geosoft.gxpy.map.delete_files` Delete all files associates with this map name.

:func:`geosoft.gxpy.map.map_file_name` Return a fully resolved map file path using the file name, with .map extyension

:func:`geosoft.gxpy.map.save_as_image` Save a map to an image file

:func:`geosoft.gxpy.map.unique_temporary_file_name` Create a unique temporary file name.

:func:`geosoft.gxpy.project.Geosoft_project.current_db_state` Return the state of the current database.

:func:`geosoft.gxpy.project.Geosoft_project.current_map_state` Return the state of the current map.

:func:`geosoft.gxpy.project.pause` Display a pause dialog, wait for user to press continue or cancel

:func:`geosoft.gxpy.project.user_message` Display a message to the user

:func:`geosoft.gxpy.system.call_location` Returns function call location including file and line number as a string

:func:`geosoft.gxpy.utility.crc32_file` Return 32-bit CRC of a file.

:func:`geosoft.gxpy.utility.crc32_str` Return 32-bit CRC of a string.

:func:`geosoft.gxpy.utility.crc32` Return 32-bit CRC of a byte buffer.

:func:`geosoft.gxpy.utility.datetime_from_year` Return the Python datetime from a decimal Gregorian year.

:func:`geosoft.gxpy.utility.dict_from_xml` Return a dictionary of an xml string.

:func:`geosoft.gxpy.utility.dummy_mask` Return a 1-D dummy mask that is True for all rows  in a 2D numpy array that

:func:`geosoft.gxpy.utility.dummy_none` Returns None if dummy, otherwise the value.

:func:`geosoft.gxpy.utility.dummy_to_nan` Replaces dummies in float data to numpy.nan.  All other data types are returned unchanged.

:func:`geosoft.gxpy.utility.geosoft_metadata` Get the metadata dictionary for a geosoft data file.

:func:`geosoft.gxpy.utility.gx_dummy` Return the dummy for this value, or this type.

:func:`geosoft.gxpy.utility.merge_dict` Update a dictionary by adding key-values from second dictionary.  Unlike Python's

:func:`geosoft.gxpy.utility.normalize_file_name` Normalize a file name string by replacing '' with '/'.  This is useful for writing

:func:`geosoft.gxpy.utility.uuid` :returns: a uuid as a string

:func:`geosoft.gxpy.utility.xml_from_dict` Return a unicode XML string of a dictionary.

:func:`geosoft.gxpy.utility.year_from_datetime` Return a decimal Gregorian calendar year from a Python datetime.

:func:`geosoft.gxpy.view.View.close` Close a view.  Use to close a view when working outside of a `with ... as:` construct.

:func:`geosoft.gxpy.view.View.delete_group` Delete a group from a map. Nothing happens if the view does not contain this group.

:func:`geosoft.gxpy.view.View.extent_map_cm` Return an extent in map cm.

:func:`geosoft.gxpy.view.View.get_class_name` Get the name associated with a view class.

:func:`geosoft.gxpy.view.View.locate` Locate and scale the view on the map.

:func:`geosoft.gxpy.view.View.map_cm_to_view` Returns the location of this point on the map (in cm) to the view location in view units.

:func:`geosoft.gxpy.view.View.set_class_name` Set the name associated with a class.

:func:`geosoft.gxpy.view.View.view_to_map_cm` Returns the location of this point on the map in the view.

:func:`geosoft.gxpy.view.View_3d.groups_on_plane_list` List of groups on a plane.

:func:`geosoft.gxpy.view.View_3d.has_plane` True if the view contains plane

:func:`geosoft.gxpy.view.View_3d.new` Createa a new 3D view.

:func:`geosoft.gxpy.view.View_3d.open` Open an existing geosoft_3dv file.

:func:`geosoft.gxpy.viewer.view_document` Open Geosoft Desktop application for viewing a supported Geosoft document type.  These include:

:func:`geosoft.gxpy.vv.GXvv.list` Return the content of the VV as a list.


  
Version 9.1
-----------------

New Classes
^^^^^^^^^^^

:class:`geosoft.gxpy.gdb.Geosoft_gdb` Class to work with Geosoft databases. This class wraps many of the functions found in

:class:`geosoft.gxpy.grid.Grid` Grid and image class.

:class:`geosoft.gxpy.gx.GXpy` Geosoft GX context.  This is a singleton class, so subsequent creation returns an instance

:class:`geosoft.gxpy.va.GXva` VA class wrapper.

:class:`geosoft.gxpy.vv.GXvv` VV class wrapper.

:exc:`geosoft.gxpy.gdb.GdbException` Exceptions from :mod:`geosoft.gxpy.gdb`.

:exc:`geosoft.gxpy.grid.GridException` Exceptions from :mod:`geosoft.gxpy.grid`.

:exc:`geosoft.gxpy.gx.GXException` Exceptions from :mod:`geosoft.gxpy.gx`.

:exc:`geosoft.gxpy.project.ProjectException` Exceptions from :mod:`geosoft.gxpy.project`.

:exc:`geosoft.gxpy.system.GXSysException` Exceptions from :mod:`geosoft.gxpy.system`.

:exc:`geosoft.gxpy.utility.UtilityException` Exceptions from :mod:`geosoft.gxpy.utility`.

:exc:`geosoft.gxpy.va.VAException` Exceptions from :mod:`geosoft.gxpy.va`.

:exc:`geosoft.gxpy.vv.VVException` Exceptions from :mod:`geosoft.gxpy.vv`.


New Functions
^^^^^^^^^^^^^

:func:`geosoft.gxpy.gdb.Geosoft_gdb.channel_details` Return dictionary of channel details

:func:`geosoft.gxpy.gdb.Geosoft_gdb.channel_dtype` Returns channel numpy dtype

:func:`geosoft.gxpy.gdb.Geosoft_gdb.channel_name_symb` Return channel name, symbol

:func:`geosoft.gxpy.gdb.Geosoft_gdb.channel_width` Channel array width, 1 for normal channels, >1 for VA channels.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.commit` Commit database changes.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.delete_channel` Delete channel(s) by name or symbol.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.delete_line` Delete a line by name or symbol.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.discard` Discard database changes.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.line_details` Return dictionary of line details

:func:`geosoft.gxpy.gdb.Geosoft_gdb.line_name_symb` Return line name, symbol

:func:`geosoft.gxpy.gdb.Geosoft_gdb.list_channels` Return a dict of channels in the database.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.list_lines` List of lines in the database

:func:`geosoft.gxpy.gdb.Geosoft_gdb.list_values` Build a list of unique values in a channel.  Uniqueness depends on the current display format for

:func:`geosoft.gxpy.gdb.Geosoft_gdb.new_channel` Return a channel symbol, create if it does not exist.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.new_line` Get a line symbol.  If line exists an error is raised.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.new` Create a new database.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.open` Open an existing database.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.read_channel` Read data from a single channel.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.read_line` Read a line of data into a numpy array.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.select_lines` Change selected state of a line, or group of lines

:func:`geosoft.gxpy.gdb.Geosoft_gdb.set_channel_details` Set/change channel details from dictionary

:func:`geosoft.gxpy.gdb.Geosoft_gdb.write_channel` Write data to a single channel.

:func:`geosoft.gxpy.gdb.Geosoft_gdb.write_line` Write data to a multiple channels in a line.  If no channel list is provided it assumes that the

:func:`geosoft.gxpy.grid.Grid.delete_files` Delete the files associated with this grid when deleting the grid object.

:func:`geosoft.gxpy.grid.Grid.from_data_array` Create grid from a 2D numpy array.

:func:`geosoft.gxpy.grid.Grid.new` Create a new grid file.

:func:`geosoft.gxpy.grid.Grid.open` Open an existing grid file.

:func:`geosoft.gxpy.grid.Grid.properties` Get the grid properties dictionary

:func:`geosoft.gxpy.grid.Grid.read_column` :param column:  column to read, if not specified the next column is read starting from column 0

:func:`geosoft.gxpy.grid.Grid.read_row` :param row:     row to read, if not specified the next row is read starting from row 0

:func:`geosoft.gxpy.grid.Grid.set_properties` Set grid properties from a properties dict.  Settable property keys are:

:func:`geosoft.gxpy.grid.Grid.write_rows` Write data to a grid by rows.

:func:`geosoft.gxpy.grid.array_locations` Create an array of (x,y,z) points for a grid defined by properties

:func:`geosoft.gxpy.grid.decorate_name` Properly decorate a grid name.

:func:`geosoft.gxpy.grid.grid_bool` :param g1,g2:   Grid of grids to merge

:func:`geosoft.gxpy.grid.grid_mosaic` Combine a set of grids into a single grid.  Raises an error if the resulting grid is too large.

:func:`geosoft.gxpy.grid.name_parts` Return folder, undecorated file name + ext, file root, ext, decorations.

:func:`geosoft.gxpy.gx.GXpy.disable_app` Disables application windows to allow modal Python UI.

:func:`geosoft.gxpy.gx.GXpy.enable_app` Enables application windows to allow modal Python UI.

:func:`geosoft.gxpy.gx.GXpy.entitlements` :returns: The current user entitlements as a dictionary.

:func:`geosoft.gxpy.project.dict_from_lst` Return a dictionary from a Geosoft :class:`geosoft.gxapi.GXLST` instance.

:func:`geosoft.gxpy.project.get_user_input` Display a dialog prompt on the Geosoft Desktop and wait for user input.

:func:`geosoft.gxpy.project.running_script` :returns: 1 if running from a script, 0 if running interactively.

:func:`geosoft.gxpy.system.app_name` Returns application script name.

:func:`geosoft.gxpy.system.func_name` Returns function name.

:func:`geosoft.gxpy.system.parallel_map` A parallel equivalent of the map() built-in Python function (it supports only one iterable argument though).

:func:`geosoft.gxpy.system.remove_dir` Robust directory removal, with timed retries to allow for OS timing lags.  If you need to use this

:func:`geosoft.gxpy.system.unzip` Decompress and write the content of a zip file to a folder.

:func:`geosoft.gxpy.system.wait_on_file` Working with large files on systems that cache the file can cause a situation

:func:`geosoft.gxpy.utility.check_version` Check the minimum API version.

:func:`geosoft.gxpy.utility.decode` Decode a string (s) to a numpy format defined by string (f).

:func:`geosoft.gxpy.utility.dict_from_lst` Return a dictionary from a Geosoft :class:`geosoft.gxapi.GXLST` instance.

:func:`geosoft.gxpy.utility.dict_from_reg` dictionary from a :class:`geosoft.gxapi.GXREG` instance

:func:`geosoft.gxpy.utility.display_message` Display a message to the user.

:func:`geosoft.gxpy.utility.dtype_gx` :returns:   numpy dtype from a GX type

:func:`geosoft.gxpy.utility.folder_temp` Return the Geosoft temporary folder name.

:func:`geosoft.gxpy.utility.folder_user` Return the Geosoft user configurations folder name.

:func:`geosoft.gxpy.utility.folder_workspace` Return the Geosoft project folder name.

:func:`geosoft.gxpy.utility.get_parameters` Get parameters from the Project Parameter Block.

:func:`geosoft.gxpy.utility.get_shared_dict` Get a dictionary shared by an external application.

:func:`geosoft.gxpy.utility.gx_dtype` :returns:   GX type for a numpy dtype

:func:`geosoft.gxpy.utility.rdecode_err` Geosoft string conversion to a number, raising ValueError on failure

:func:`geosoft.gxpy.utility.rdecode` Geosoft string (number, date, time, geographic) conversion to a number, always works.

:func:`geosoft.gxpy.utility.run_external_python` Run a python script as an external program, returning results as a dictionary.

:func:`geosoft.gxpy.utility.save_parameters` Save parameters to the Project Parameter Block.  Parameter group names and member names

:func:`geosoft.gxpy.utility.set_shared_dict` Save a dictionary to be shared by an separate application.

:func:`geosoft.gxpy.utility.yearFromJulianDay2` Julian year

:func:`geosoft.gxpy.va.GXva.get_data` Return a numpy array of data from a va.

:func:`geosoft.gxpy.va.GXva.refid` Resample VA to a new fiducial and length

:func:`geosoft.gxpy.va.GXva.set_data` Copy numpy data into a VA.

:func:`geosoft.gxpy.vv.GXvv.get_data` Return vv data in a numpy array

:func:`geosoft.gxpy.vv.GXvv.refid` Resample VV to a new fiducial and length

:func:`geosoft.gxpy.vv.GXvv.set_data` Set vv data from an array.  If the array is float type numpy.nan are


geosoft.gxapi module history
==========================================

  
Version 9.2.0
-----------------


New Functions
^^^^^^^^^^^^^

:func:`geosoft.gxapi.GX3DV.from_map` Get an 3DV from MAP handle (e.g. from \ :func:`geosoft.gxapi.GXEMAP.lock`\  on open geosoft_3dv document in project)

:func:`geosoft.gxapi.GXEDB.get_cur_point` Returns the coordinates of the currently selected point in the database (first value if range selected)

:func:`geosoft.gxapi.GXEMAP.packed_files` The number of packed files in the map.

:func:`geosoft.gxapi.GXIP.export_data_to_ubc_3d` Export of IP data to UBC 3D IP format.

:func:`geosoft.gxapi.GXIP.get_electrode_locations_and_mask_values2` Get unique electrodes, along with current mask info.

:func:`geosoft.gxapi.GXIP.get_qc_channel` Get the QC channel handle, if it exists.

:func:`geosoft.gxapi.GXIP.set_electrode_mask_values_single_qc_channel` Set unique electrodes, along with current mask info.

:func:`geosoft.gxapi.GXIPJ.set_vcs` Set the Verical Coordinate System in the IPJ name string

:func:`geosoft.gxapi.GXMAP.create_linked_3d_view` Create a 3D View in this map that is linked to a MVIEW in a 3D View file.

:func:`geosoft.gxapi.GXMVIEW.get_3d_point_of_view` Get 3D point of view (values are will be rDUMMY if view for 2D views)

:func:`geosoft.gxapi.GXMVIEW.get_aggregate` Get an existing Aggregate object from the view.

:func:`geosoft.gxapi.GXMVIEW.get_col_symbol` Get an existing colored symbol object from the view.

:func:`geosoft.gxapi.GXMVIEW.get_datalinkd` Get an existing Data Link Display (DATALINKD) object from the view.

:func:`geosoft.gxapi.GXMVIEW.set_3d_point_of_view` Set 3D point of view (no effect on 2D views)

:func:`geosoft.gxapi.GXPROJ.current_document_of_type` Get the name loaded document of a specific type.

:func:`geosoft.gxapi.GXPROJ.current_document` Get the name and type of the loaded document with focus.

:func:`geosoft.gxapi.GXPROJ.list_loaded_documents` Fills a VV with loaded documents of a certain type.

:func:`geosoft.gxapi.GXSYS.log_script_run` This method logs that a script was run

:func:`geosoft.gxapi.GXTEST.core_class` Generic Class Test Wrapper


  
Version 9.1
-----------------

New Classes
^^^^^^^^^^^

:exc:`geosoft.gxapi.GXAPIError` A subclass of `RuntimeError <https://docs.python.org/3/library/exceptions.html#RuntimeError>`_ which is raised whenever

:exc:`geosoft.gxapi.GXCancel` A subclass of `SystemExit <https://docs.python.org/3/library/exceptions.html#SystemExit>`_ which is raised when a

:exc:`geosoft.gxapi.GXError` A subclass of `RuntimeError <https://docs.python.org/3/library/exceptions.html#RuntimeError>`_ which is raised whenever

:exc:`geosoft.gxapi.GXExit` A subclass of `SystemExit <https://docs.python.org/3/library/exceptions.html#SystemExit>`_ which is raised when a script


New Functions
^^^^^^^^^^^^^

:func:`geosoft.gxapi.GXContext.clear_ui_console` Clears the console owned by UI applications. Has no effect on consoles owning standalone scripts.

:func:`geosoft.gxapi.GXContext.create` Creates the GX execution context (will return the current one if it exists).

:func:`geosoft.gxapi.GXContext.current` Get the current thread's GX execution context (throws if not created yet).

:func:`geosoft.gxapi.GXContext.enable_application_windows` Used by to prevent user interaction while showing modal windows with APIs where it might be hard to use proper window parenting

:func:`geosoft.gxapi.GXContext.get_active_wnd_id` Get currently active window (main window, floating document or other popup, 0 if not available).

:func:`geosoft.gxapi.GXContext.get_main_wnd_id` Get the main window handle (0 if not available).

:func:`geosoft.gxapi.GXContext.has_ui_console` Checks if a console owned by UI applications is available

:func:`geosoft.gxapi.GXContext.show_ui_console` Shows or hides console owned by UI applications. Showing the console Will also bring the window to the front if behind

:func:`geosoft.gxapi.GXDB.valid_symb` This method checks to see if the specified symbol is a valid symbol in the database.

:func:`geosoft.gxapi.GXDH.plot_symbols_3d` Plot 3D symbols to an existing 3D map view.

:func:`geosoft.gxapi.GXDU.get_xyz_num_fields` Get the number of fields in the XYZ file.

:func:`geosoft.gxapi.GXDU.import_bin4` Same as \ :func:`geosoft.gxapi.GXDU.import_bin2`\  but with an import mode

:func:`geosoft.gxapi.GXDU.table_selected_lines_fid` Place a Line/Fid information into a Channel for the selected lines in the database.

:func:`geosoft.gxapi.GXEMAP.draw_rect_3d` Plot a square symbol on a section view.

:func:`geosoft.gxapi.GXEMAP.get_point_3d` Returns the coordinates of a user selected point.

:func:`geosoft.gxapi.GXEMAP.get_view_ipj` Get a view's IPJ.

:func:`geosoft.gxapi.GXIPGUI.launch_offset_ipqc_tool` Launch the Offset IP QC tool on a database.

:func:`geosoft.gxapi.GXMVIEW.get_3d_group_flags` Get a 3D geometry group's 3D rendering flags.

:func:`geosoft.gxapi.GXMVIEW.set_3d_group_flags` Set a 3D geometry group's 3D rendering flags.

:func:`geosoft.gxapi.GXSYS.filter_parm_group` Controls filtering of specific group during logging.


  
Version 9.0.0
-----------------


New Functions
^^^^^^^^^^^^^

:func:`geosoft.gxapi.GXDATALINKD.create_arc_lyr_ex` Create an DATALINKD object from a ArcGIS LYR file

:func:`geosoft.gxapi.GXDATALINKD.create_arc_lyr_from_tmp_ex` Create an DATALINKD object from a temporary ArcGIS LYR file

:func:`geosoft.gxapi.GXDB.get_line_selection` Get the selection status for a line.

:func:`geosoft.gxapi.GXDB.set_line_selection` Set the selection status for a line.

:func:`geosoft.gxapi.GXDBWRITE.add_block` Add the current block of data.

:func:`geosoft.gxapi.GXDBWRITE.add_channel` Add a data channel to the DBWRITE object.

:func:`geosoft.gxapi.GXDBWRITE.commit` Commit remaining data to the database.

:func:`geosoft.gxapi.GXDBWRITE.create_xy` Create a DBWRITE object for a XY-located data. Add channels using the

:func:`geosoft.gxapi.GXDBWRITE.create_xyz` Create a DBWRITE object for a XYZ-located data.

:func:`geosoft.gxapi.GXDBWRITE.create` Create a DBWRITE object

:func:`geosoft.gxapi.GXDBWRITE.get_chan_array_size` Get the number of columns of data in a channel.

:func:`geosoft.gxapi.GXDBWRITE.get_db` Get the output DB handle from the DBWRITE object.

:func:`geosoft.gxapi.GXDBWRITE.get_v_vx` Get the X channel VV handle.

:func:`geosoft.gxapi.GXDBWRITE.get_v_vy` Get the Y channel VV handle.

:func:`geosoft.gxapi.GXDBWRITE.get_v_vz` Get the Z channel VV handle.

:func:`geosoft.gxapi.GXDBWRITE.get_va` Get the VA handle for an array channel.

:func:`geosoft.gxapi.GXDBWRITE.get_vv` Get the VV handle for a channel.

:func:`geosoft.gxapi.GXDBWRITE.test_func` Temporary test function.

:func:`geosoft.gxapi.GXDU.split_line_by_direction2` The same as SplitLineByDirection, but with the option to maintain line types when outputting sequentially numbered lines.

:func:`geosoft.gxapi.GXDU.split_line_xy3` Break up a line based on tolerance of lateral and horizontal distance, with

:func:`geosoft.gxapi.GXEDB.current_no_activate` This method returns the Current Edited Database.

:func:`geosoft.gxapi.GXEDB.get_window_position` Get the map window's position and dock state

:func:`geosoft.gxapi.GXEDB.set_window_position` Get the map window's position and dock state

:func:`geosoft.gxapi.GXEDOC.current_no_activate` This method returns the Current Edited Document.

:func:`geosoft.gxapi.GXEDOC.get_window_position` Get the map window's position and dock state

:func:`geosoft.gxapi.GXEDOC.load_no_activate` Loads a list of documents into the workspace

:func:`geosoft.gxapi.GXEDOC.set_window_position` Get the map window's position and dock state

:func:`geosoft.gxapi.GXEMAP.current_no_activate` This method returns the Current Edited map.

:func:`geosoft.gxapi.GXEMAP.digitize_peaks` Digitise points from the current map and place in VVs.

:func:`geosoft.gxapi.GXEMAP.get_window_position` Get the map window's position and dock state

:func:`geosoft.gxapi.GXEMAP.reload_grid` Reloads a grid document.

:func:`geosoft.gxapi.GXEMAP.set_window_position` Get the map window's position and dock state

:func:`geosoft.gxapi.GXEMAPTEMPLATE.current_no_activate` This method returns the Current Edited map template.

:func:`geosoft.gxapi.GXEMAPTEMPLATE.get_window_position` Get the map window's position and dock state

:func:`geosoft.gxapi.GXEMAPTEMPLATE.set_window_position` Get the map window's position and dock state

:func:`geosoft.gxapi.GXEUL3.ex_euler_calc` Does the exeuler depth calculations

:func:`geosoft.gxapi.GXEUL3.ex_euler_derive` Calculates gradients

:func:`geosoft.gxapi.GXGUI.coord_sys_wizard_grid` Launch the coordinate system definition/display GUI.

:func:`geosoft.gxapi.GXGUI.get_client_window_area` Get the location of the oasis montaj client window.

:func:`geosoft.gxapi.GXGUI.get_window_position` Get the oasis Montaj window's position state

:func:`geosoft.gxapi.GXGUI.get_window_state` Retrieve the current state of the oasis Montaj window

:func:`geosoft.gxapi.GXGUI.launch_geo_dotnetx_tool_ex` Launch a user created .Net GEOXTOOL.

:func:`geosoft.gxapi.GXGUI.launch_geo_x_tool_ex` Launch a user created GEOXTOOL.

:func:`geosoft.gxapi.GXGUI.launch_single_geo_dotnetx_tool_ex` Launch a user created .Net GEOXTOOL ensuring a single instance.

:func:`geosoft.gxapi.GXGUI.set_window_position` Get the oasis Montaj window's position and state

:func:`geosoft.gxapi.GXGUI.set_window_state` Changes the state of the oasis Montaj window

:func:`geosoft.gxapi.GXIMU.get_z_peaks_vv` Same as \ :func:`geosoft.gxapi.GXIMU.get_zvv`\ , but find the closest peak value to the input locations, and return

:func:`geosoft.gxapi.GXIP.get_electrode_locations_and_mask_values` Get unique electrodes, along with current mask info.

:func:`geosoft.gxapi.GXIP.set_electrode_mask_values` Set unique electrodes, along with current mask info.

:func:`geosoft.gxapi.GXIPJ.reproject_section_grid` Reproject a section grid

:func:`geosoft.gxapi.GXIPJ.set_3d_view_from_axes` Set 3D orientation parameters

:func:`geosoft.gxapi.GXLPT.get_standard_lst` Copies the six standard line types into a LST object.

:func:`geosoft.gxapi.GXMVIEW.is_projection_empty` Returns 1 if the view projection and view user projection are both empty (undefined).

:func:`geosoft.gxapi.GXMXD.convert_to_map` Create Geosoft map from ArcGIS MXD

:func:`geosoft.gxapi.GXSYS.check_arc_license_ex` Check to see if a ESRI ArcEngine or ArcView license is available, returns type and version of available engine.

:func:`geosoft.gxapi.GXSYS.decrypt_string` Decrypts a string that has been previously encrypted by \ :func:`geosoft.gxapi.GXSYS.encrypt_string`\ ().

:func:`geosoft.gxapi.GXSYS.encrypt_string` Encrypts a string for secure storage in configuration files

:func:`geosoft.gxapi.GXSYS.get_entitlement_rights` Get the Entitlement Rights

:func:`geosoft.gxapi.GXSYS.get_loaded_menus` Get the loaded menus.

:func:`geosoft.gxapi.GXSYS.is_encrypted_string` Checks whether the specified string was encrypted by \ :func:`geosoft.gxapi.GXSYS.encrypt_string`\ ().

:func:`geosoft.gxapi.GXSYS.set_loaded_menus` Load a list of menus

:func:`geosoft.gxapi.GXVVU.offset_correct_xyz` Correct locations based on heading and fixed offset.

:func:`geosoft.gxapi.GXVVU.tokenize_to_values` Tokenize a string based on any characters.


  
Version 8.5.0
-----------------


New Functions
^^^^^^^^^^^^^

:func:`geosoft.gxapi.GXDBREAD.add_channel` Add a data channel to the DBREAD object.

:func:`geosoft.gxapi.GXDBREAD.create_xy` Create a DBREAD object for a XY-located data. Add channels using the

:func:`geosoft.gxapi.GXDBREAD.create_xyz` Create a DBREAD object for a XYZ-located data.

:func:`geosoft.gxapi.GXDBREAD.create` Create a DBREAD object

:func:`geosoft.gxapi.GXDBREAD.get_chan_array_size` Get the number of columns of data in a channel.

:func:`geosoft.gxapi.GXDBREAD.get_next_block` Get the next block of data.

:func:`geosoft.gxapi.GXDBREAD.get_number_of_blocks_to_process` Get the number of blocks to be served up.

:func:`geosoft.gxapi.GXDBREAD.get_v_vx` Get the X channel VV handle.

:func:`geosoft.gxapi.GXDBREAD.get_v_vy` Get the Y channel VV handle.

:func:`geosoft.gxapi.GXDBREAD.get_v_vz` Get the Z channel VV handle.

:func:`geosoft.gxapi.GXDBREAD.get_va` Get the VA handle for an array channel.

:func:`geosoft.gxapi.GXDBREAD.get_vv` Get the VV handle for a channel.

:func:`geosoft.gxapi.GXDU.import_io_gas` Import data columns from an ioGAS data file.

:func:`geosoft.gxapi.GXDU.range_xy` Find the range of X, and Y in the selected lines.

:func:`geosoft.gxapi.GXDU.range_xyz` Find the range of X, Y and Z in selected lines.

:func:`geosoft.gxapi.GXDU.split_line_by_direction` The line is split when the heading (calculated from the current X and Y channels) changes by more than a specified amount over

:func:`geosoft.gxapi.GXFFT.rc_filter` RC filter

:func:`geosoft.gxapi.GXGU.gravity_still_reading_correction` Gravity Still Reading Correction on selected lines.

:func:`geosoft.gxapi.GXIPJ.get_3d_matrix_orientation` Gets the coefficients of a 3D matrix orientation.

:func:`geosoft.gxapi.GXIPJ.set_3d_matrix_orientation` Apply a 3D orientation directly using matrix coefficients.

:func:`geosoft.gxapi.GXMVIEW.hide_shadow2_d_interpretations` Hide/Show 2d shadow interpretations.

:func:`geosoft.gxapi.GXMVU.generate_surface_from_voxel` TODO...

:func:`geosoft.gxapi.GXPDF3D.export2_d` Export a 2D map to a PDF file.

:func:`geosoft.gxapi.GXPROJ.add_document_without_opening` Adds (and opens) a document file in the current project.

:func:`geosoft.gxapi.GXSURFACE.get_extents` Get the spatial range of all surface items.

:func:`geosoft.gxapi.GXSURFACEITEM.compute_extended_info` Compute more information (including validation) about of all mesh components in the surface item.

:func:`geosoft.gxapi.GXSURFACEITEM.get_extents` Get the spatial range of the the surface item.

:func:`geosoft.gxapi.GXSURFACEITEM.get_geometry_info` Get the total number of vertices and triangles of all mesh components in item.

:func:`geosoft.gxapi.GXSURFACEITEM.get_info` Gets information about the surface item.

:func:`geosoft.gxapi.GXSURFACEITEM.get_properties_ex` Gets the properties of the surface item  (includes new properties introduced in 8.5).

:func:`geosoft.gxapi.GXSURFACEITEM.set_properties_ex` Sets the properties of the surface item (includes new properties introduced in 8.5).

:func:`geosoft.gxapi.GXVOX.add_generate_by_subset_pg` Add a subset 3D  pagers. These should be "slabs", 16 wide in the input direction, and the size of the

:func:`geosoft.gxapi.GXVOX.end_generate_by_subset_pg` Output the voxel, after adding all the subset PGs.

:func:`geosoft.gxapi.GXVOX.export_seg_y` Export a voxel to a depth SEG-Y file

:func:`geosoft.gxapi.GXVOX.generate_vector_voxel_from_db` Generate a vector voxel VOX from a Database

:func:`geosoft.gxapi.GXVOX.init_generate_by_subset_pg` Initialize the generate of a VOX from a series of 3D subset pagers

:func:`geosoft.gxapi.GXVOX.tin_grid_db` \ :func:`geosoft.gxapi.GXVOX.tin_grid_db`\    TIN-Gridding, DB version, 3D.


